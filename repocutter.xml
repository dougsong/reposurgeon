<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE refentry PUBLIC
   "-//OASIS//DTD DocBook XML V4.1.2//EN"
   "docbook/docbookx.dtd">
<refentry id='repocutter.1'>
<refmeta>
<refentrytitle>repocutter</refentrytitle>
<manvolnum>1</manvolnum>
<refmiscinfo class='date'>2009-09-10</refmiscinfo>
<refmiscinfo class='productname'>repocutter</refmiscinfo>
<refmiscinfo class='source'>repocutter</refmiscinfo>
<refmiscinfo class='manual'>Development Tools</refmiscinfo>
</refmeta>
<refnamediv id='name'>
<refname>repocutter</refname>
<refpurpose>surgical and filtering operations on Subversion dump files</refpurpose>
</refnamediv>
<refsynopsisdiv id='synopsis'>

<cmdsynopsis>
  <command>repocutter</command>
      <arg choice="opt">-q</arg>
      <arg choice="opt">-r <replaceable>selection</replaceable></arg>
      <arg choice='plain'><replaceable>subcommand</replaceable></arg>
      <arg choice="opt">-d</arg>
      <arg choice="opt">-i</arg>
</cmdsynopsis>
</refsynopsisdiv>

<refsect1 id='description'><title>DESCRIPTION</title>

<para>This program does surgical and filtering operations on Subversion
dump files.  While it is is not as flexible as
<citerefentry><refentrytitle>reposurgeon</refentrytitle><manvolnum>1</manvolnum></citerefentry>,
it can perform Subversion-specific transformations that reposurgeon
cannot, and can be useful for processing Subversion repositories into a
form suitable for conversion.</para>

<para>(As a matter of possible historical interest, the reason for the
partial functional overlap between repocutter and reposurgeon is that
repocutter was first written earlier and became a testbed for some of
the design concepts in reposurgeon. After reposurgeon was written, the
author learned that it could not naturally support some useful
operations very specific to Subversion, and enhanced repocutter to do
those.)</para>

<para>In all commands, the -r (or --range) option limits the selection
of revisions over which an operation will be performed. A selection
consists of one or more comma-separated ranges. A range may consist of
an integer revision number or the special name HEAD for the head
revision. Or it may be a colon-separated pair of integers, or an
integer followed by a colon followed by HEAD.</para>

<para>Normally, each subcommand produces a progress spinner on standard
error; each turn means another revision has been filtered. The -q (or
--quiet) option suppresses this.</para>

<para> The -d command enabled debug messages on standard error. These
are probably only of interest to repocutter developers.</para>

<para> The -i command sets the input source to a specified filename.
This is primarilseey useful when running the program under a debugger.</para>

<para>Generally, if you need to use this program at all, you will find
that you need to pipe your dump file through multiple instances of it
doing one kind of operation each.  This is not as expensive as it
sounds; with the exception of the reduce subcommand, the working set
of this program is bounded by the size of the largest commit metadata
item.  It does not need to hold the entire repo metadata in
memory.</para>

<para>The following subcommands are available:</para>

<variablelist>
<varlistentry>
<term>help</term>
<listitem><para>Without arguments, list available commands. With a
command-name argument, show detailed help for that subcommand.</para></listitem>
</varlistentry>
<varlistentry>
<term>select</term>
<listitem><para>The 'select' subcommand selects a range and permits
only revisions in that range to pass to standard output.  A range
beginning with 0 includes the dumpfile header.</para></listitem>
</varlistentry>
<varlistentry>
<term>propset</term>
<listitem><para>Set a property to a value. May be restricted by a
revision selection. You may specify multiple property settings. See
the embedded help for syntax details.</para></listitem>
</varlistentry>
<varlistentry>
<term>propdel</term>
<listitem><para>Delete the named property. May be restricted by a revision
selection. You may specify multiple properties to be deleted. See
the embedded help for syntax details.</para></listitem>
</varlistentry>
<varlistentry>
<term>proprename</term>
<listitem><para>Rename a property. May be restricted by a
revision selection. You may specify multiple properties to be
renamed. See the embedded help for syntax details.</para></listitem>
</varlistentry>
<varlistentry>
<term>log</term>
<listitem><para>enerate a log report, same format as the output of svn
log on a repository, to standard output.</para></listitem>
</varlistentry>
<varlistentry>
<term>setlog</term>
<listitem><para>Replace the log entries in the input dumpfile with the
corresponding entries in a specified file, which should be in the
format of an svn log output.  Replacements may be restricted to a
specified range. See the embedded help for syntax
details.</para></listitem>
</varlistentry>
<varlistentry>
<term>strip</term>
<listitem><para>Replace content with unique generated cookies on all node paths
matching the specified regular expressions; if no expressions are
given, match all paths.  Useful when you need to examine a
particularly complex node structure.</para></listitem>
</varlistentry>
<varlistentry>
<term>expunge</term>
<listitem><para>Delete all operations with Node-path headers matching
specified Python regular expressions.  Any revision left with no Node
records after this filtering has its Revision record removed as
well.</para></listitem>
</varlistentry>
<varlistentry>
<term>pathrename</term>
<listitem><para>Modify Node-path and Node-copyfrom-path headers
matching a specified Python regular expression; replace with a given
string.  The string may contain Python backreferences to parenthesized
portions of the pattern. See the embedded help for syntax
details.</para></listitem>
</varlistentry>
<varlistentry>
<term>renumber</term>
<listitem><para>Renumber all revisions, patching Node-copyfrom headers
as required.  Any selection option is ignored. Takes no
arguments.</para></listitem>
</varlistentry>
<varlistentry>
<term>reduce</term>
<listitem><para>Strip revisions out of a dump so the only parts left those likely to
be relevant to a conversion problem. See the embedded help for syntax
details and the relevance filter.</para></listitem>
</varlistentry>
<varlistentry>
<term>see</term>
<listitem><para>Render a very condensed report on the repository node
structure, mainly useful for examining strange and pathological
repositories. File content is ignored.  You get one line per
repository operation, reporting the revision, operation type, file
path, and the copy source (if any).  Directory paths are distinguished
by a trailing slash.  The 'copy' operation is really an 'add' with a
directory source and target; the display name is changed to make them
easier to see.</para></listitem>
</varlistentry>
<varlistentry>
<term>swap</term>
<listitem><para>Swap the top two components of every path.  This is
sometimes useful when converting a multi-project Subversion repository
that has normal trunk/branch/tag structure under each top-level
directory (of course the alternative is to break it into componebts
using multiple strip operations).</para></listitem>
</varlistentry>
</variablelist>

<para>
</para>

</refsect1>

<refsect1 id='history'><title>HISTORY</title>

<para>Under the name <quote>snvcutter</quote>, an ancestor of this
program traveled in the <filename>contrib/</filename> director of the
Subversion distribution. It had functional overlap with
<citerefentry><refentrytitle>reposurgeon</refentrytitle><manvolnum>1</manvolnum></citerefentry>
because it was directly ancestral to that code. It was moved to the 
<citerefentry><refentrytitle>reposurgeon</refentrytitle><manvolnum>1</manvolnum></citerefentry>
distribution in January 2016.</para>
<para>This program was ported from Python to Go in August 2018, at
which time the obsolete "squash" command was retired.</para>
</refsect1>

<refsect1 id='BUGS'><title>BUGS</title>

<para>There is one regression since the Python version: repocutter no
longer recognizes Macintosh-syle line endings consisting of a carriage
return only. This may be addressed in a future version.</para>

<para>Because the native Go regular-expression library declines to
support backreferences (in order to scale better) the regexps in the
pathrename comand are implemented using a third-party library that supports
Perl regular-expression syntax.  Neither are exactly identical to the
Python regexps supported in older versions.</para>

</refsect1>


<refsect1 id='see_also'><title>SEE ALSO</title>

<para><citerefentry><refentrytitle>reposurgeon</refentrytitle><manvolnum>1</manvolnum></citerefentry>.</para>

</refsect1>

<refsect1 id='example'><title>EXAMPLE</title>

<para>Suppose you have a Subversion repository with the following
semi-pathological structure:</para>

<literallayout>
Directory1/ (with unrelated content)
Directory2/ (with unrelated content)
TheDirIWantToMigrate/
                branches/
                               crazy-feature/
                                               UnrelatedApp1/
                                               TheAppIWantToMigrate/
                tags/
                               v1.001/
                                               UnrelatedApp1/
                                               UnrelatedApp2/
                                               TheAppIWantToMigrate/
                trunk/
                               UnrelatedApp1/
                               UnrelatedApp2/
                               TheAppIWantToMigrate/
</literallayout>

<para>You want to transform the dump file so that TheAppIWantToMigrate can be
subject to a regular branchy lift. A way to dissect out the code of
interest would be with the following series of filters applied:</para>

<programlisting>
repocutter expunge '^Directory1' '^Directory2'
repocutter pathrename '^TheDirIWantToMigrate/' ''
repocutter expunge '^branches/crazy-feature/UnrelatedApp1/
repocutter pathrename 'branches/crazy-feature/TheAppIWantToMigrate/' 'branches/crazy-feature/'
repocutter expunge '^tags/v1.001/UnrelatedApp1/'
repocutter expunge '^tags/v1.001/UnrelatedApp2/'
repocutter pathrename '^tags/v1.001/TheAppIWantToMigrate/' 'tags/v1.001/'
repocutter expunge '^trunk/UnrelatedApp1/'
repocutter expunge '^trunk/UnrelatedApp2/'
repocutter pathrename '^trunk/TheAppIWantToMigrate/' 'trunk/'
</programlisting>

</refsect1>

<refsect1 id='limitations'><title>LIMITATIONS</title>

<para>The sift and expunge operations can produce output dumps that are invalid.
The problem is copyfrom operations (Subversion branch creations).  If an included revision
includes a copyfrom reference to an excluded one, the reference target won't be in the
emitted dump; it won't load correctly in either Subversion or reposurgeon. Attempts
to be clever about this won't work; the problem is inherent in the data model
of Subversion.</para>

<para>In steeams with mergeinfo properties, renumbering will not fix them up. This
means merge data will be lot or garbled. This may be fixed in a future release.</para>

</refsect1>

<refsect1 id='author'><title>AUTHOR</title>
<para>Eric S. Raymond <email>esr@thyrsus.com</email>. This tool is
distributed with reposurgeon; see the project page at <ulink
url='http://www.catb.org/~esr/reposurgeon'>http://www.catb.org/~esr/reposurgeon</ulink>.</para>
</refsect1>
</refentry>
