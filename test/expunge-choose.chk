blob
mark :5
data 1329
= Reposurgeon Designer's Notes =
Eric S. Raymond <esr@thyrsus.com>

The purpose of reposurgeon is to enable risky operations that version-control
systems don't want to let you do, such as (a) editing past comments and 
metadata, (b) excising commits, and (c) coalescing commits. The motivation
for reposurgeon was to help with artifacts and sca r tisue created by 
repository conversions.

The reposurgeon tool depends on being able to map all the version-control
systems it knows about into a common data model.  Here are the components 
of the model:

1. A sequence of commit objects.  The primary key for these objects is
the date of the commit. Each commit represents an ebtire state of
some file tree.

2. A map of the is-a-parent-of relationship. A commit may have multiplre 
parents; the map implies a DAG (directed acyclic graph) of commits.

3. A list of branch heads.  This is a mapping from names to tip 
revisions in the DAG.

4. A list of tags (name-to-commit mappings).

This model is intended to capture the common semantics of distributed
version-control systems: the three specific tarhets are git, hg, and
Subversion (more may be added in future).

It is a design constraint that all reposurgeon operations either prserve
all VCS-specific metadata thety are not told to modify or warn you when
they cannot.





commit refs/tags/lightweight-sample
mark :6
author Eric S. Raymond <esr@thyrsus.com> 1287759014 -0400
committer Eric S. Raymond <esr@thyrsus.com> 1287759014 -0400
data 27
Beginning of design notes.
M 100644 :5 theory.txt

blob
mark :8
data 1329
= Reposurgeon Designer's Notes =
Eric S. Raymond <esr@thyrsus.com>

The purpose of reposurgeon is to enable risky operations that version-control
systems don't want to let you do, such as (a) editing past comments and 
metadata, (b) excising commits, and (c) coalescing commits. The motivation
for reposurgeon was to help with artifacts and scar tisue created by 
repository conversions.

The reposurgeon tool depends on being able to map all the version-control
systems it knows about into a common data model.  Here are the components 
of the model:

1. A sequence of commit objects.  The primary key for these objects is
the date of the commit. Each commit represents an ebtire state of
some file tree.

2. A map of the is-a-parent-of relationship. A commit may have multiplre 
parents; the map implies a DAG (directed acyclic graph) of commits.

3. A list of branch heads.  This is a mapping from names to tip 
revisions in the DAG.

4. A list of tags (name-to-commit mappings).

This model is intended to capture the common semantics of distributed
version-control systems: the three specific tarhets are git, hg, and
Subversion (more may be added in future).

It is a design constraint that all reposurgeon operations either preserve
all VCS-specific metadata thety are not told to modify or warn you when
they cannot.





reset refs/tags/lightweight-sample
commit refs/tags/lightweight-sample
mark :9
author Eric S. Raymond <esr@thyrsus.com> 1287768418 -0400
committer Eric S. Raymond <esr@thyrsus.com> 1287768418 -0400
data 40
Sync data structures with design notes.
M 100644 :8 theory.txt

blob
mark :22
data 1499
= Reposurgeon Theory of Operation =
Eric S. Raymond <esr@thyrsus.com>

The purpose of reposurgeon is to enable risky operations that
version-control systems don't want to let you do, such as (a) editing
past comments and metadata, (b) excising commits, (c) coalescing
commits, and (d) removing files and subtrees from repo history. The
original motivation for reposurgeon was to clean up artifacts
created by repository conversions.

To keep reposurgeon simple and flexible, it does not do its own
repository reading and writing.  Instead, it relies on being able to
parse and emit the dump format created by git-fast-export and read by
git-fast-import.  This means that it can be used on any
version-control system that that has both fast-export and fast-import
utilities.  This set includes git itself, hg, bzr, and Subversion. As
version-control systems add support for the fast-import format, their
reppositories will automatically become editable by repoosurgeon see 
the https://git.wiki.kernel.org/index.php/InterfacesFrontendsAndTools[Git 
Wiki tools page] for a large collection of such tools.

It is a design constraint that all reposurgeon operations either
preserve all repository state they are not explicitly told to modify
or warn you when they cannot do so.  Users should, however, be aware
of limitations in the ability of the fast-import format to capture 
repository state. Presently the most significant such limitation is
that the dumps do not capture git lightweight tags.





commit refs/tags/lightweight-sample
mark :23
author Eric S. Raymond <esr@thyrsus.com> 1288009592 -0400
committer Eric S. Raymond <esr@thyrsus.com> 1288009592 -0400
data 27
Upate theory of operation.
from :9
M 100644 :22 theory.txt

blob
mark :27
data 2028
= Reposurgeon Theory of Operation =
Eric S. Raymond <esr@thyrsus.com>

The purpose of reposurgeon is to enable risky operations that
version-control systems don't want to let you do, such as (a) editing
past comments and metadata, (b) excising commits, (c) coalescing
commits, and (d) removing files and subtrees from repo history. The
original motivation for reposurgeon was to clean up artifacts
created by repository conversions.

To keep reposurgeon simple and flexible, it does not do its own
repository reading and writing.  Instead, it relies on being able to
parse and emit the dump format created by git-fast-export and read by
git-fast-import.  This means that it can be used on any
version-control system that that has both fast-export and fast-import
utilities.  This set includes git itself, hg, and bzr. 

Subversion/RCS/CVS aren't directly supported because exporting from
them requires fixups of usernames in the committer information to full
email addresses.  Trying to handle that entirely inside this tool
would be excessively messy, so we don't. Instead we let the user
transform dump files and cope with the export/import himself.

As version-control systems add support for the fast-import format,
their reppositories will automatically become editable by repoosurgeon
see the
https://git.wiki.kernel.org/index.php/InterfacesFrontendsAndTools[Git
Wiki tools page] for a large collection of such tools.

It is a design constraint that all reposurgeon operations either
preserve all repository state they are not explicitly told to modify
or warn you when they cannot do so.  Users should, however, be aware
of limitations in the ability of the fast-import format to capture 
repository state. Presently the most significant such known 
limitations are:

* Under git, dumps do not capture git lightweight tags.

* Under bzr, dumps do not capture information about (a) multiple-author 
commits, (b) bzr custom commit properties (e.g. branch-nick and bugs 
fixed by this change), or (c) empty directories.





commit refs/tags/lightweight-sample
mark :28
author Eric S. Raymond <esr@thyrsus.com> 1288032988 -0400
committer Eric S. Raymond <esr@thyrsus.com> 1288032988 -0400
data 22
Document limitations.
from :23
M 100644 :27 theory.txt

blob
mark :50
data 1969
= Reposurgeon Theory of Operation =
Eric S. Raymond <esr@thyrsus.com>

The purpose of reposurgeon is to enable risky operations that
version-control systems don't want to let you do, such as (a) editing
past comments and metadata, (b) excising commits, (c) coalescing
commits, and (d) removing files and subtrees from repo history. The
original motivation for reposurgeon was to clean up artifacts
created by repository conversions.

To keep reposurgeon simple and flexible, it does not do its own
repository reading and writing.  Instead, it relies on being able to
parse and emit the dump format created by git-fast-export and read by
git-fast-import.  This means that it can be used on any
version-control system that that has both fast-export and fast-import
utilities.  This set includes git itself, hg, and bzr. 

Subversion/RCS/CVS aren't directly supported because exporting from
them requires fixups of usernames in the committer information to full
email addresses.  Trying to handle that entirely inside this tool
would be excessively messy, so we don't. Instead we let the user
transform dump files and cope with the export/import himself.

As version-control systems add support for the fast-import format,
their repositories will automatically become editable by reposurgeon
see the
https://git.wiki.kernel.org/index.php/InterfacesFrontendsAndTools[Git
Wiki tools page] for a large collection of such tools.

It is a design constraint that all reposurgeon operations either
preserve all repository state they are not explicitly told to modify
or warn you when they cannot do so.  Users should, however, be aware
of limitations in the ability of the fast-import format to capture 
repository state. Presently the most significant such known 
limitations are:

* Under bzr, dumps do not capture information about (a) multiple-author 
commits, (b) bzr custom commit properties (e.g. branch-nick and bugs 
fixed by this change), or (c) empty directories.





commit refs/tags/lightweight-sample
mark :51
author Eric S. Raymond <esr@thyrsus.com> 1288083882 -0400
committer Eric S. Raymond <esr@thyrsus.com> 1288083882 -0400
data 53
git-fast-export captures lightweight tags after all.
from :28
M 100644 :50 theory.txt

