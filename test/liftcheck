#!/bin/sh
#
# liftcheck - compare reposurgeon lift of a Subversion repo with a checkout
#
# The -v option reveals executed subcommands.
# The -u option enables context-diffing in the compare operation
# The -i option disables the normal suppression of ignore comparisons
# The -d option disables removal of the generated repositories after the run
# The -a option enables progress messages from the Subversion loader.
# The -s option enables display of common files
# The -r option sets a revision to check rather than trunk, branches and tags of HEAD.
#               The corresponding git commit is found with the legacy map, which means
#               only the branch modified in the revision will be compared, unless the
#               -B option is also used to make a flat repository.
#               You can use an integer range min-max, or "all", to check multiple
#               revisions in a row. Non-existing revisions are silently ignored.
# The -R option sets a read limit to the dump parsing, for speed
# The -e option sets exckude patterbs to ignore uninteresting tags and branches
# The -B option makes liftcheck use --nobranch to compare against a flat repository.
#               If the repository has no trunk, this option is enforced.
#
# The REPOSURGEON environment variable can be used to substitute in a
# different implementation.
#
# The TESTOPT variable can be used to pass an early command or option setting
# to reposurgeon.
set -e

repotoolopt=""
debug=no
compareopt=""
svnquiet=-q
slimit=""
rlimit=""
nobranch=""
while getopts ade:ir:R:suvB opt
do
    case $opt in
	d) debug=yes;;
	e) compareopt="${compareopt} -e ${OPTARG}";;
	a) svnquiet="";;
	i|s|u) compareopt="${compareopt} -${opt}";;
	R) slimit="-r ${OPTARG}" rlimit="readlimit ${OPTARG}";;
	r) revision="${OPTARG}";;
	v) repotoolopt="${repotoolopt} -${opt}";;
	u) compareopt="${compareopt} -${opt}";;
	B) nobranch="--nobranch";;
    esac
done
shift $(($OPTIND - 1))

if [ -z "$1" ]
then
    echo "liftcheck: an argument file (a Subversion dump) is required."
    exit 1
fi

what=$1
if [ -f ${what}.svn ]
then
    what=${what}.svn
elif [ ! -f ${what} ]
then
    echo "No script matching ${what} found"
    exit 1
fi

stem=liftcheck$$

rm -fr liftcheck[0123456789]*

if [ $debug = no ]
then
    trap "rm -fr ${stem} ${stem}-checkout ${stem}-git ${stem}.legacy ${stem}*~" 0 1 2 15
fi

# Make a Subversion repo from the dump
./svn-to-svn ${svnquiet} ${slimit} -c <${what} ${stem}

# Make a git repo from the dump using reposurgeon
${REPOSURGEON:-../reposurgeon} "${TESTOPT}" "${rlimit}" "read ${nobranch} <${what}" "prefer git" "rebuild ${stem}-git" "legacy write>${stem}.legacy" >&-

if [ ! -e ${stem}-checkout/trunk ]
then
    nobranch=--nobranch
fi

if [ -n "${revision}" ]
then
    if [ ${revision} = "all" ]
    then
        min=1
        max=`cat ${stem}.legacy | wc -l`
    else
        min=`echo ${revision} | sed 's/-.*$//'`
        max=`echo ${revision} | sed 's/^.*-//'`
    fi
    for revision in `seq ${min} ${max}`
    do
        # Find out the git revision to pass
        dt=`grep "^SVN:${revision}[[:space:]]" ${stem}.legacy | sed 's/^.*\t\(.*\)!.*$/\1/'`
        if [ -n "${dt}" ]
        then
            cd ${stem}-git
            sha=`git rev-list --all --until ${dt} --since ${dt}`
            cd ..

            echo $revision
            # Compare the original with the lift
            ../repotool ${repotoolopt} compare ${compareopt} ${nobranch} -r ${revision}:${sha} \
                                               ${stem}-checkout ${stem}-git
        fi
    done
else

    # Compare the original with the lift
    ../repotool ${repotoolopt} compare-all ${compareopt} ${nobranch} \
                                           ${stem}-checkout ${stem}-git

fi

if [ $debug != no ]
then
    ls -d liftcheck[0123456789]*
fi

# end
