#!/bin/bash
#
# usage: repobench dumpfile min step max
#
# This script runs reposurgeon multiple times with different readlimit
# values and writes out the run time and peak RSS for each run to a
# file. The file is then sent to gnuplot to make a graph.
#
# Takes four arguments, the dump file to read followed by the minimum,
# step, and maximum values to use for readlimit (just the same
# arguments as seq).
#
# Leaves the following files in place:
# * A logfile for each conversion run that generates warnings or errors.
#   Only generated *if* there are errors. Extension .log.
# * A *single* data file with lines correlating elapsed time to
#   two measures of memory, One entry per run in the readlimit loop.
#   Extension .dat.
#
# The data will be recorded in a file named after the current git
# revision, as an aid to comparing multiple historical revisions of
# the code. See plot.sh for how we graph the data, and svg.sh for
# turning the data into an svg file you can embed in a web
# page.
#
# New data is simply appended to the end of the data file, so it is
# useful to run this script multiple times with different step
# values. For example, the GCC repository had ~280k revisions. Running
# this first with a step of 50k to see a rough graph in a shorter
# amount of time, followed by runs with smaller step values, such as
# 10k or 1k, is recommended.
#
# BTW, this script uses sudo to instruct the kernel to drop everything
# from the file system cache between runs. For the sake of your own
# sanity, you should configure sudo not to ask you for a password
# every time.

mode=profile
style=runtime
while getopts bp:s: opt
do
    case $opt in
	b) mode=build;;	# Default
	p) mode=plot; datfile=$OPTARG;;
	s) style=$OPTARG;;
	*) cat <<EOF
repobench - generate or render reposurgeon profling results
EOF
	   exit 0;;
    esac
done
#shift $(($OPTIND - 1))

function plot {
    data=$1
    style=$2

    case $style in
        runtime)
	    cat >/tmp/plotme$$ <<EOF
set key top lmargin
set xlabel "number of SVN revisions read in by reposurgeon"
set ylabel "runtime"
f(x) = a*x + b
g(x) = c*x**2 + d*x + e
fit f(x) file using 1:2 via a,b
fit g(x) file using 1:2 via c,d,e
plot file u 1:2 title "memory usage" lw 2
EOF
	    ;;
	rss)
	    cat >/tmp/plotme$$ <<EOF
set key top lmargin
set xlabel "number of SVN revisions read in by reposurgeon"
set ylabel "RSS"
f(x) = a*x + b
g(x) = c*x**2 + d*x + e
fit f(x) file using 1:3 via a,b
fit g(x) file using 1:3 via c,d,e
plot file u 1:3 title "memory (RSS)" lw 2, \
     f(x) title "linear fit" lw 2, \
     g(x) title "quadratic fit" lw 2
EOF
	    ;;
	memory)
	    cat >/tmp/plotme$$ <<EOF
set key top lmargin
set xlabel "number of SVN revisions read in by reposurgeon"
set ylabel "average total memory"
f(x) = a*x + b
g(x) = c*x**2 + d*x + e
fit f(x) file using 1:4 via a,b
fit g(x) file using 1:4 via c,d,e
plot file u 1:4 title "memory (RSS)" lw 2, \
     f(x) title "linear fit" lw 2, \
     g(x) title "quadratic fit" lw 2
EOF
	    ;;
	*)
	    echo "Unknown plot type $style" >&2
	    exit 1
	    ;;
    esac

    # The actual plotting
    gnuplot --persist -e "file='${data}'" /tmp/plotme$$ -
    rm -f /tmp/plotme$$
}

case $mode in
    profile)
	function run {
	    datfile="${1}"	# The output benchmark data
	    logfile="${2}"	# The logfile for the conversion
	    dump="${3}"		# The dump to be read in
	    readlimit="${4}"	# The nmber of revisions to read
	    # %e = CPU real time
	    # %M = maximum resident set size of the process in KB
	    # %K = average total (data+stack+text) memory use in KB
	    /usr/bin/time -f "${readlimit} %e %M %K" -a -o "${datfile}" \
			  ./reposurgeon "logfile ${logfile}" \
					"readlimit ${readlimit}" \
					"read <${dump}" 2>&- 1>&-
	}

	dump="${1}"
	min="${2}"
	step="${3}"
	max="${4}"
	rev="$(git rev-parse HEAD)"
	datfile="${dump}_${rev}.dat"
	for readlimit in $(seq "${min}" "${step}" "${max}"); do
	    # Flush all disk VM caches so the data file has to be reread
	    sudo sh -c 'echo 3 >/proc/sys/vm/drop_caches'
	    run "${datfile}" "${dump}_${rev}_${readlimit}.log" "${dump}" "${readlimit}"
	done
	plot "${datfile}" $style
	;;

    plot)
	plot "${datfile}" $style
	;;
esac

#./bench/plot.sh runtime "${datfile}"
